# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Tests

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.filter.outputs.backend }}
      frontend: ${{ steps.filter.outputs.frontend }}
    steps:
      - uses: actions/checkout@v4
        with:
          # Fetch all history for accurate diffing, especially on pull requests
          fetch-depth: 0
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            backend:
              - '.github/**'
              - 'db/**'
              - 'execution_engine/**'
              - 'server/**'
              - '.env.ci'
              - 'compose.yml'
            frontend:
              - '.github/**'
              - 'frontend/**'
              - 'Dockerfile.ci'

  backend:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.backend == 'true' }}
    strategy:
      # Still test other services if one fails
      fail-fast: false
      matrix:
        # All services to test
        service: ["server", "db", "execution_engine"]

    defaults:
      run:
        working-directory: ./${{ matrix.service }}
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
        cache: 'pip' # Speed up builds
        cache-dependency-path: |
          ./${{ matrix.service }}/requirements.txt
          ./${{ matrix.service }}/requirements.ci.txt
        
    - name: Install dependencies for ${{ matrix.service }}
      run: |
        python -m pip install --upgrade pip
        python -m pip install -r requirements.txt
        python -m pip install -r requirements.ci.txt

    - name: Run Initial Tests on ${{ matrix.service }}
      run: |
        # Stop build on syntax errors or undefined names
        python -m flake8 ./src --count --select=E9,F63,F7,F82 --show-source --statistics

    - name: Run Unit Tests on ${{ matrix.service }}
      working-directory: ./${{ matrix.service }}/src
      run: |
        python -m pytest ../tests/unit/

  backend-style:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.backend == 'true' }}
    strategy:
      matrix:
        service: [ "server", "db", "execution_engine" ]
      fail-fast: false
    defaults:
      run:
        working-directory: ./${{ matrix.service }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: 'pip'
          cache-dependency-path: |
            ./${{ matrix.service }}/requirements.txt
            ./${{ matrix.service }}/requirements.ci.txt

      - name: Install dependencies for ${{ matrix.service }}
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
          python -m pip install -r requirements.ci.txt
          python -m pip install mypy pyline black isort

      - name: Run Black for ${{ matrix.service }}
        if: always()
        run: black --check --diff --line-length 100 ./src

      - name: Run isort for ${{ matrix.service }}
        if: always()
        run: isort --check-only --diff -w 100 ./src

      - name: Run Mypy for ${{ matrix.service }}
        if: always()
        run: mypy --ignore-missing-imports --show-error-codes ./src

      - name: Run Pylint for ${{ matrix.service }}
        if: always()
        run: pylint --rcfile=../setup.cfg ./src

  frontend:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.frontend == 'true' }}
    defaults:
      run:
        working-directory: ./frontend

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '24'
        cache: 'npm'
        cache-dependency-path: 'frontend/package-lock.json'

    - name: Install Dependencies
      run: npm ci

    - name: Run Linter
      run: npm run lint

    # This will be uncommented when frontend team adds unit tests
    #- name: Run Unit Tests
    #  run: npm run test:unit

  backend-integration:
    runs-on: ubuntu-latest
    needs: [detect-changes, backend]
    if: ${{ needs.detect-changes.outputs.backend == 'true' }}

    env:
      POSTGRES_DB: ci_db
      POSTGRES_USER: ci_user
      POSTGRES_PASSWORD: ci_password

    steps:
      - uses: actions/checkout@v4

      - name: Create .env file for Docker Compose
        run: cp .env.ci .env

      - name: Build and run containers
        run: docker compose -f compose.yml up server --wait --wait-timeout 120 -d

      - name: Run DB
        working-directory: ./db/src
        run: docker compose exec db_handler python -m pytest ../tests/integration/

      - name: Run Execution Engine
        working-directory: ./execution_engine/src
        run: docker compose exec execution_engine python -m pytest ../tests/integration/

      - name: Run Backend Interface
        working-directory: ./server/src
        run: docker compose exec server_interface python -m pytest ../tests/integration/

      - name: View logs on failure
        if: failure()
        run: docker compose logs

      - name: Stop containers
        if: always()
        run: docker compose down
