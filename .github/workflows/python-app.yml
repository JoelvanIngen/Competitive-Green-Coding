# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application (all services)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  backend_unit_and_lint:
    runs-on: ubuntu-latest
    strategy:
      # Still test other services if one fails
      fail-fast: false
      matrix:
        # All services to test
        service: ["server", "db", "execution_engine"]

    defaults:
      run:
        working-directory: ./${{ matrix.service }}
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
        #cache: 'pip' # Speed up builds
        #cache-dependency-path: '${{ matrix.service }}/requirements.txt'
        
    - name: Install dependencies for ${{ matrix.service }}
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        pip install -r requirements-dev.txt

    - name: Lint ${{ matrix.service }} with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        # Only lint src directory
        flake8 ./src --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 ./src --count --exit-zero --max-complexity=10 --max-line-length=100 --statistics

    - name: Test ${{ matrix.service }} with pytest [unit tests]
      working-directory: ./${{ matrix.service }}/src
      run: |
        python -m pytest ../tests/unit/

  frontend_unit_and_lint:
    runs-on: ubuntu-latest

    # Finish when we figure out whether frontend has tests

    steps:
    - name: Pass
      run: |
        echo "Placeholder test"

  integration:
    runs-on: ubuntu-latest
    needs: [backend_unit_and_lint, frontend_unit_and_lint]

    env:
      POSTGRES_DB: ci_db
      POSTGRES_USER: ci_user
      POSTGRES_PASSWORD: ci_password

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          #cache: 'pip' # Speed up builds
          #cache-dependency-path: '${{ matrix.service }}/requirements.txt'

      - name: Install test dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt # TODO: Find good way to install from all reqs.txt files

      - name: Build and run containers
        run: docker compose -f compose.yml up --build d

      - name: Wait for containers to be healthy
        # 2 minute timeout
        run: |
          echo "Waiting for services to be healthy"
          end_time=$((SECONDS+120))
          while [ $SECONDS -lt $end_time ]; do
            if ! docker compose ps --services | xargs docker inspect -f '{{ .State.Health.Status }}' | grep -v "healthy"; then
              echo "All services are healthy!"
              docker compose ps
              exit 0
            fi
            echo -n "."
            sleep 5
          done
          echo "Timeout waiting for services to be healthy."
          docker compose ps
          docker compose logs
          exit 1

      - name: Run integration tests
        # Skeleton; we need to be inside {module}/src/ folder for this to work
        run: python -m pytest ./server/tests/integration ./db/tests/integration ./execution_engine/tests/integration

      - name: View logs on failure
        if: failure()
        run: docker compose logs

      - name: Tear down services
        if: always()
        run: docker compose down
