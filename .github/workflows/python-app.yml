# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Tests

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  find-changed-files:
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.filter.outputs.backend }}
      frontend: ${{ steps.filter.outputs.frontend }}
    steps:
      - uses: actions/checkout@v4
        with:
          # Fetch all history for accurate diffing, especially on pull requests
          fetch-depth: 0
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            backend:
              - '.github/workflows/**'
              - 'db/**'
              - 'execution_engine/**'
              - 'server/**'
              - '.env.ci'
              - 'compose.yml'
            frontend:
              - '.github/workflows/**'
              - 'frontend/**'
              - 'Dockerfile.ci'

  backend-unit-and-lint:
    runs-on: ubuntu-latest
    needs: find-changed-files
    if: ${{ needs.changed-files.outputs.backend == 'true' }}
    strategy:
      # Still test other services if one fails
      fail-fast: false
      matrix:
        # All services to test
        service: ["server", "db", "execution_engine"]

    defaults:
      run:
        working-directory: ./${{ matrix.service }}
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
        cache: 'pip' # Speed up builds
        cache-dependency-path: '${{ matrix.service }}/requirements-dev.txt'
        
    - name: Install dependencies for ${{ matrix.service }}
      run: |
        python -m pip install --upgrade pip
        python -m pip install -r requirements-dev.txt

    - name: Lint ${{ matrix.service }} with flake8
      run: |
        # Stop build on syntax errors or undefined names
        python -m flake8 ./src --count --select=E9,F63,F7,F82 --show-source --statistics
        
        # Treat other style issues as warnings, so we can still perform other tests (--exit-zero)
        python -m flake8 ./src --count --exit-zero --max-complexity=7 --max-line-length=100 --statistics

    - name: Test ${{ matrix.service }} with pytest [unit tests]
      working-directory: ./${{ matrix.service }}/src
      run: |
        python -m pytest ../tests/unit/

  frontend-unit-and-lint:
    runs-on: ubuntu-latest
    needs: find-changed-files
    if: ${{ needs.changed-files.outputs.frontend == 'true' }}
    defaults:
      run:
        working-directory: ./frontend

    steps:
    - uses: actions/checkout@v4

    - name: Build frontend CI image
      run: docker build -t frontend-ci-image -f Dockerfile.ci .

    - name: Run frontend lint
      run: docker run --rm frontend-ci-image npm run lint

    # This will be uncommented when frontend team adds unit tests
    #- name: Run frontend unit tests
    #  run: docker run --rm frontend-ci-image npm run test:unit

  backend-integration:
    runs-on: ubuntu-latest
    needs: [find-changed-files, backend-unit-and-lint]
    if: ${{ needs.changed-files.outputs.backend == 'true' }}

    env:
      POSTGRES_DB: ci_db
      POSTGRES_USER: ci_user
      POSTGRES_PASSWORD: ci_password

    steps:
      - uses: actions/checkout@v4

      - name: Create .env file for Docker Compose
        run: cp .env.ci .env

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip' # Speed up builds
          cache-dependency-path: |
            server/requirements-dev.txt
            db/requirements-dev.txt
            execution_engine/requirements-dev.txt

      - name: Install test dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r db/requirements-dev.txt -r execution_engine/requirements-dev.txt -r server/requirements-dev.txt

      - name: Build and run containers
        run: docker compose -f compose.yml up server --build --wait --wait-timeout 120 -d

      - name: Run DB integration tests
        working-directory: ./db/src
        run: python -m pytest ../tests/integration/

      - name: Run Execution Engine integration tests
        working-directory: ./execution_engine/src
        run: python -m pytest ../tests/integration/

      - name: Run Backend Interface integration tests
        working-directory: ./server/src
        run: python -m pytest ../tests/integration/

      - name: View logs on failure
        if: failure()
        run: docker compose logs

      - name: Stop containers
        if: always()
        run: docker compose down
