openapi: 3.0.3
info:
  title: "De Interface"
  description: API for frontend to interact with the backend
  version: 1.0.0
servers:
  - url: http://localhost:8000
    description: De interface

tags:
  - name: "Login page"
    description: "**[Jona]** User authentication operations"
  - name: "Settings page"
    description: "**[Jona]** User account settings and profile management"
  - name: "Problems page"
    description: "**[Adib]** Overview of all problems"
  - name: "[NOT NOW] Discussion board page"
    description: "**[Abe]** View discussion threads and create new ones"
  - name: "[NOT NOW] Thread detail page"
    description: "**[Abe]** View a single thread and its comments"
  - name: "Profile page"
    description: "**[Abe]** Public user profile information"
  - name: Submission page
    description: "**[Martijn]** Problem submission and solution operations"
  - name: Leaderboard page
    description: "**[Adib]** View leaderboard for a specific problem"
  - name: Admin page
    description: "**[Adam]** Administrative operations for adding and removing problems"

paths:
  /api/auth/register:
    post:
      summary: User registration
      description: Register a new user account
      operationId: registerUser
      tags:
        - "Login page"
      requestBody:
        description: Registration details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
            example:
              username: "jona"
              email: "jona@student.uva.nl"
              password: "123456"
      responses:
        '201':
          description: Successful registration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
              example:
                access_token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1dWlkIjoiMUYiLCJ1c2VybmFtZSI6ImJha2JlZXN0IiwicGVybWlzc2lvbiI6InVzZXIiLCJleHAiOjQ5MDI0fQ.signature"
                token_type: "bearer"
        '400':
          description: Registration failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                usernameError:
                  summary: Username validation error
                  value:
                    type: "username"
                    description: "Username does not match constraints"
                usernameTaken:
                  summary: Username already exists
                  value:
                    type: "username"
                    description: "Username already in use"
                emailError:
                  summary: Email validation error
                  value:
                    type: "email"
                    description: "Invalid email format"
                emailTaken:
                  summary: Email already registered
                  value:
                    type: "email"
                    description: "There already exists an account associated to this email"
                passwordError:
                  summary: Password validation error
                  value:
                    type: "password"
                    description: "Password does not match constraints"
                otherError:
                  summary: Other server error
                  value:
                    type: "other"
                    description: "An unexpected error occurred"

  /api/auth/login:
    post:
      summary: User login
      description: Authenticate a user with username and password
      operationId: loginUser
      tags:
        - "Login page"
      requestBody:
        description: Login credentials
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            example:
              username: "jona"
              password: "123456"
      responses:
        '200':
          description: Successful authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
              example:
                access_token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1dWlkIjoiMUYiLCJ1c2VybmFtZSI6ImJha2JlZXN0IiwicGVybWlzc2lvbiI6InVzZXIiLCJleHAiOjQ5MDI0fQ.signature"
                token_type: "bearer"
        '400':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalidCredentials:
                  summary: Invalid username or password combination
                  value:
                    type: "invalid"
                    description: "Invalid username or password"
                usernameError:
                  summary: Username validation error
                  value:
                    type: "username"
                    description: "Username does not match constraints"
                otherError:
                  summary: Other server error
                  value:
                    type: "other"
                    description: "An unexpected error occurred"

  /api/settings:
    put:
      summary: Update user settings
      description: |
        **Authentication required**: Include JWT token in the Authorization header:
        `Authorization: Bearer [JWT]`

        **Updates a specific user setting.**

        **Note:** being able to update `avatar_id` should be the priority for now. That feature is already fully designed in the frontend and a must have for the end product. See issue 245 I created for the backend (https://github.com/JoelvanIngen/Competitive-Green-Coding/issues/245) for the full backend requirements.

        Changing the other user info `username`, `email`, and `password` is nice to have, but not a priority for now.

      operationId: updateUserSetting
      tags:
        - "Settings page"
      security:
        - bearerAuth: []
      requestBody:
        description: Setting to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SettingUpdateRequest'
            examples:
              avatar_id:
                summary: Update avatar ID
                value:
                  key: "avatar_id"
                  value: "4"

              username:
                summary: Update username
                value:
                  key: "username"
                  value: "linus_123"
              email:
                summary: Update email
                value:
                  key: "email"
                  value: "example@google.com"
              password:
                summary: Update password
                value:
                  key: "password"
                  value: "new_password_123"
              private:
                summary: Update "Hide profile" setting
                value:
                  key: "private"
                  value: "1"
      responses:
        '200':
          description: Setting updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SettingUpdateResponse'
              example:
                success: true
                message: "Setting updated successfully"
        '400':
          description: Invalid key or value in setting update request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalidKey:
                  summary: Invalid setting key
                  value:
                    type: "key"
                    description: "Invalid setting key"
                invalidValue:
                  summary: Invalid setting value
                  value:
                    type: "value"
                    description: "Invalid value for setting avatar_id"

        '401':
          description: Unauthorized - invalid or expired JWT
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                type: "unauthorized"
                description: "Invalid or expired JWT token"

  /api/leaderboard:
    post:
      summary: Get the leaderboard for this problem
      description: Retrieve leaderboard entries for a specific programming problem
      operationId: getProblemLeaderboard
      tags:
        - Leaderboard page
      requestBody:
        description: Leaderboard request parameters
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LeaderboardRequest'
            example:
              ID: 42
              first-row: 0
              last-row: 9
      responses:
        '200':
          description: Successful retrieval of leaderboard data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaderboardResponse'
              example:
                problem-id: 42
                problem-name: "Two Sum"
                problem-language: "Python"
                problem-difficulty: "Easy"
                scores:
                  - user_id: "1F"
                    user_name: "bakbeest"
                    score: 100
                  - user_id: "2A"
                    user_name: "jona"
                    score: 95
                  - user_id: "3B"
                    user_name: "alex"
                    score: 90
        '400':
          description: Request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                value:
                  type: "other"
                  description: "Data not found"

  /api/problem:
    get:
      summary: Get problem details
      description: Retrieve detailed information about a specific programming problem for the submission page
      operationId: getProblemDetails
      tags:
        - Submission page
      parameters:
        - in: query
          name: problem-id
          schema:
            type: integer
          required: true
          description: Database ID of the problem
          example: 1
      responses:
        '200':
          description: Successful retrieval of problem details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailsResponse'
              example:
                problem-id: 1
                name: "Sort integer array"
                language: "c"
                difficulty: "easy"
                tags: ["array", "int"]
                short-description: "Lorem ipsum"
                long-description: "# Task\\nYou will be given an array of numbers."
                template-code: "int sort_odd(int n) {\\n    // Here comes your code.\\n}"
        '404':
          description: Problem not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                value:
                  type: "other"
                  description: "No problem found with id 1"

  /api/submission:
    post:
      summary: Submit problem solution
      description: |
        Submit code solution for a programming problem.

        **Authentication required**: Include JWT token in the Authorization header:
        `Authorization: Bearer [JWT]`
      operationId: submitSolution
      tags:
        - Submission page
      security:
        - bearerAuth: []
      requestBody:
        description: Solution submission details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubmissionRequest'
            example:
              problem-id: 1
              language: "c"
              code: "int sort_odd(int n) { /* solution code */ }"
      responses:
        '201':
          description: Submission successful
          content:
            application/json:
              example:
                submission-uuid: "dbe0066f166d90f8783a84124e75c444da6eb082161ada4d7721f868ad6d130503411522cb6184ab1f181325b6c27dfdfb10c1d83a22b138c9144900acb77e025fa4deaad416d941aa2d77f9d6ceb0aa"
        '400':
          description: Submission failed
          content:
            application/json:
              example:
                type: "other"
                description: "Internal error"
        '404':
          description: Problem not found
          content:
            application/json:
              example:
                type: "other"
                description: "No problem found with id 1"

  /api/get-submission:
    post:
      summary: Get submission results
      description: |
        Get submission results for a programming problem.

        **Authentication required**: Include JWT token in the Authorization header:
        `Authorization: Bearer [JWT]`
      operationId: submitSolution
      tags:
        - Submission page
      security:
        - bearerAuth: []
      requestBody:
        description: Solution submission details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubmissionRequest'
            example:
              submission-uuid: "dbe0066f166d90f8783a84124e75c444da6eb082161ada4d7721f868ad6d130503411522cb6184ab1f181325b6c27dfdfb10c1d83a22b138c9144900acb77e025fa4deaad416d941aa2d77f9d6ceb0aa"
      responses:
        '200':
          description: Submission processed (may contain compilation or test errors)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmissionResponse'
              examples:
                compilerError:
                  summary: Compiler error
                  value:
                    error: "compiler"
                    description: "Syntax error on line 2"
                    tests-passed: null
                    tests-failed: null
                    cpu-time: null
                testFailures:
                  summary: Some tests failed
                  value:
                    error: "tests"
                    description: "Failed test 5: ...\\nFailed test 7: ..."
                    tests-passed: 8
                    tests-failed: 2
                    cpu-time: null
                allTestsPassed:
                  summary: All tests passed
                  value:
                    error: null
                    description: "All tests passed."
                    tests-passed: 10
                    tests-failed: 0
                    cpu-time: 1.112
        '404':
          description: Problem not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                value:
                  type: "other"
                  description: "No problem found with id 1"

  /api/admin/add-problem:
    post:
      summary: Add new problem
      description: |
        Add a new programming problem to the system (admin only).

        **Authentication required**: Include JWT token in the Authorization header:
        `Authorization: Bearer [JWT]`
      operationId: AddProblem
      tags:
        - Admin page
      security:
        - bearerAuth: []
      requestBody:
        description: Problem details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddProblemRequest'
            example:
              name: "Sort integer array"
              language: "c"
              difficulty: "easy"
              tags: ["array", "int"]
              short-description: "Lorem ipsum"
              long-description: "# Task\\nYou will be given an array of numbers."
              template-code: "int sort_odd(int n) {\\n    // Here comes your code.\\n}"
      responses:
        '201':
          description: Problem successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailsResponse'
              example:
                problem-id: 1
                name: "Sort integer array"
                language: "c"
                difficulty: "easy"
                tags: ["array", "int"]
                short-description: "Lorem ipsum"
                long-description: "# Task\\nYou will be given an array of numbers."
                template-code: "int sort_odd(int n) {\\n    // Here comes your code.\\n}"
        '400':
          description: Validation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                value:
                  type: "validation"
                  description: "Title is required\nDifficulty must be one of: easy, medium, hard"
        '401':
          description: Unauthorized - user is not admin or JWT invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                value:
                  type: "unauthorized"
                  description: "User does not have admin permissions"
        '404':
          description: Endpoint not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                value:
                  type: "not_found"
                  description: "Endpoint not found"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                value:
                  type: "server_error"
                  description: "An internal server error occurred"

  /api/admin/remove-problem:
    post:
      summary: Remove existing problem
      description: |
        Delete a programming problem from the system **(admin only)**.

        **Authentication required** – supply a JWT in the `Authorization`
        header (`Authorization: Bearer [JWT]`).

        The backend will handle all cascade-cleanup logic
        (e.g. submissions, stats).
      operationId: remove_problem
      tags: ["Admin page"]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        description: ID of the problem to delete
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/remove_problem_request'
            example:
              problem_id: 42
      responses:
        "200":
          description: Problem successfully deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/remove_problem_response'
              example:
                problem_id: 42
                deleted: true
        "400":
          description: Validation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                type: "validation"
                description: "problem_id must be a positive integer"
        "401":
          description: Unauthorized – user is not admin or JWT invalid/expired
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                type: "unauthorized"
                description: "User does not have admin permissions"
        "404":
          description: Problem not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                type: "not_found"
                description: "No problem found with id 42"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                type: "server_error"
                description: "An internal server error occurred"

  ### ───────────────────────── Problems list (overview page) ─────────────────────────

  /api/problems/all:
    post:
      summary: Get all problems (basic info)
      description: Returns all problems (optionally limited) with their name, difficulty, problem id, short description, and language.
      operationId: getAllProblems
      tags: ["Problems page"]
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProblemAllRequest'
      responses:
        "200":
          description: List of all problems (basic info)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemsListResponse"
        "404":
          description: Problems not found
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }
              example:
                type: "not_found"
                description: "Problems not found"

  ### ───────────────────────── Discussion board (thread list) ────────────────────────
  /api/discussion:
    get:
      summary: Get discussion threads
      operationId: listDiscussionThreads
      tags: ["Discussion board page"]
      parameters:
        - in: query
          name: search
          description: Search over thread title & problem slug
          schema: { type: string }
        - in: query
          name: problem-slug
          description: Only threads for this problem
          schema: { type: string }
        - in: query
          name: offset
          schema: { type: integer, minimum: 0 }
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 100 }
      responses:
        "200":
          description: List of threads
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ThreadsListResponse" }

    post:
      summary: Create a new discussion thread
      description: "**Authentication required** – supply a JWT in the `Authorization` header."
      operationId: createDiscussionThread
      tags: ["Discussion board page"]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/ThreadCreateRequest" }
            example:
              title: "Need help optimizing my Two Sum solution"
              content: "My current O(n²) approach is timing out…"
              problem-slug: "two-sum"
      responses:
        "201":
          description: Thread created
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ThreadCreateResponse" }
        "401":
          description: Unauthorized
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }

  ### ───────────────────────── Single thread (detail page) ───────────────────────────
  /api/discussion/{thread-id}:
    get:
      summary: Get thread details
      operationId: getDiscussionThread
      tags: ["Thread detail page"]
      parameters:
        - in: path
          required: true
          name: thread-id
          schema: { type: string }
          description: Thread identifier
      responses:
        "200":
          description: Thread detail
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ThreadDetailResponse" }
        "404":
          description: Thread not found
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }

  ### ───────────────────────── Comments for a thread ────────────────────────────────
  /api/discussion/{thread-id}/comments:
    get:
      summary: Get comments for a thread
      operationId: getThreadComments
      tags: ["Thread detail page"]
      parameters:
        - name: thread-id
          in: path
          description: ID of the thread
          required: true
          schema:
            type: string
        - in: query
          name: offset
          schema: { type: integer, minimum: 0 }
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 100 }
      responses:
        "200":
          description: List of comments
          content:
            application/json:
              schema: { $ref: "#/components/schemas/CommentsListResponse" }

    post:
      summary: Add a comment
      description: "**Authentication required** – supply a JWT in the `Authorization` header."
      operationId: addThreadComment
      tags: ["Thread detail page"]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: thread-id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/CommentCreateRequest" }
            example:
              body: "Use a hashmap to store seen numbers – O(n) time."
      responses:
        "201":
          description: Comment created
          content:
            application/json:
              schema: { $ref: "#/components/schemas/CommentCreateResponse" }
        "401":
          description: Unauthorized
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }

  ### ───────────────────────── User profile page ─────────────────────────────────────
  /api/profile/{username}:
    get:
      summary: Get user profile
      operationId: get_user_profile
      tags: ["Profile page"]
      parameters:
        - in: path
          name: username
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Public profile data
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ProfileResponse" }
        "404":
          description: User not found
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }
              example:
                type: "not_found"
                description: "No user exists with that username"



components:
  schemas:
    RegisterRequest:
      type: object
      required:
        - username
        - email
        - password
      properties:
        username:
          type: string
          description: Desired username
          example: "jona"
        email:
          type: string
          format: email
          description: User's email address
          example: "jona@student.uva.nl"
        password:
          type: string
          format: password
          description: User's password
          example: "123456"

    TokenResponse:
      type: object
      required:
        - access_token
        - token_type
      properties:
        access_token:
          type: string
          description: Access token
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1dWlkIjoiMUYiLCJ1c2VybmFtZSI6ImJha2JlZXN0IiwicGVybWlzc2lvbiI6InVzZXIiLCJleHAiOjQ5MDI0fQ.signature"
        token_type:
          type: string
          description: Type of token
          example: "bearer"

    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          description: User's username
          example: "jona"
        password:
          type: string
          format: password
          description: User's password
          example: "123456"

    ErrorResponse:
      type: object
      required:
        - type
        - description
      properties:
        type:
          type: string
          description: Error type indicating which field caused the error
          enum:
            - invalid
            - username
            - email
            - password
            - unauthorized
            - not_found
            - other
          example: "invalid"
        description:
          type: string
          description: Human-readable error message to display to the user (starts with capital letter, no period)
          example: "Invalid username or password"

    JWTPayload:
      type: object
      required:
        - uuid
        - username
        - permission_level
        - exp
      properties:
        uuid:
          type: string
          pattern: '^[0-9A-Fa-f]+$'
          description: User's unique identifier as hexadecimal string
          example: "1F"
        username:
          type: string
          description: User's username
          example: "bakbeest"
        permission_level:
          type: string
          description: User's permission level
          enum:
            - user
            - admin
          example: "user"
        exp:
          type: integer
          description: Token expiration time in seconds since Unix epoch
          example: 49024

    SettingUpdateRequest:
      type: object
      required:
        - key
        - value
      properties:
        key:
          type: string
          description: Setting identifier to update
          example: "avatar_id"
        value:
          type: string
          description: New value for the setting (always as string, will be parsed based on setting type)
          example: "4"

    SettingUpdateResponse:
      type: object
      required:
        - success
      properties:
        success:
          type: boolean
          description: Whether the update was successful
          example: true
        message:
          type: string
          description: Success or error message
          example: "Setting updated successfully"

    LeaderboardRequest:
      type: object
      required:
        - ID
        - first-row
        - last-row
      properties:
        ID:
          type: integer
          description: Problem ID
          example: 42
        first-row:
          type: integer
          description: First row index to retrieve (0-based)
          example: 0
        last-row:
          type: integer
          description: Last row index to retrieve (inclusive)
          example: 9

    LeaderboardResponse:
      type: object
      required:
        - problem-id
        - problem-name
        - problem-language
        - problem-difficulty
        - scores
      properties:
        problem-id:
          type: integer
          description: Unique identifier of the problem
          example: 42
        problem-name:
          type: string
          description: Name of the programming problem
          example: "Two Sum"
        problem-language:
          type: string
          description: Programming language for the problem
          example: "Python"
        problem-difficulty:
          type: string
          description: Difficulty level of the problem
          example: "Easy"
        scores:
          type: array
          description: Array of user scores, sorted from best to worst
          items:
            type: object
            required:
              - user_id
              - user_name
              - score
            properties:
              user_id:
                type: string
                description: User's unique identifier
                example: "1F"
              user_name:
                type: string
                description: User's display name
                example: "bakbeest"
              score:
                type: integer
                description: User's score for this problem
                example: 100

    ProblemDetailsResponse:
      type: object
      required:
        - problem-id
        - name
        - language
        - difficulty
        - tags
        - short-description
        - long-description
        - template-code
        - wrappers
      properties:
        problem-id:
          type: integer
          description: Database ID of the problem
          example: 1
        name:
          type: string
          description: Name of the programming problem
          example: "Sort integer array"
        language:
          type: string
          description: Programming language for the problem
          example: "c"
        difficulty:
          type: string
          description: Difficulty level of the problem
          example: "easy"
        tags:
          type: array
          description: List of tags associated with the problem
          items:
            type: string
          example: ["array", "int"]
        short-description:
          type: string
          description: Brief description of the problem
          example: "Lorem ipsum"
        long-description:
          type: string
          description: Detailed problem description in Markdown format
          example: "# Task\\nYou will be given an array of numbers."
        template-code:
          type: string
          description: Template code to start with
          example: "int sort_odd(int n) {\\n    // Here comes your code.\\n}"

    SubmissionRequest:
      type: object
      required:
        - problem-id
        - code
      properties:
        problem-id:
          type: integer
          description: Database ID of the problem
          example: 1
        code:
          type: string
          description: Solution code as plain text
          example: "int sort_odd(int n) { /* solution code */ }"

    SubmissionResponse:
      type: object
      required:
        - error
        - description
        - tests-passed
        - tests-failed
        - cpu-time
      properties:
        error:
          type: string
          nullable: true
          description: Type of error during execution, or null if successful
          enum:
            - null
            - "compiler"
            - "tests"
          example: null
        description:
          type: string
          description: Error output or success message, multiple errors separated by newlines
          example: "All tests passed."
        tests-passed:
          type: integer
          nullable: true
          description: Number of passed tests, null if tests were not reached
          example: 10
        tests-failed:
          type: integer
          nullable: true
          description: Number of failed tests, null if tests were not reached
          example: 0
        cpu-time:
          type: number
          format: float
          nullable: true
          description: CPU time in milliseconds, null if error occurred
          example: 1.112

    AddProblemRequest:
      type: object
      required:
        - name
        - language
        - difficulty
        - tags
        - short-description
        - long-description
        - template-code
        - wrappers
      properties:
        name:
          type: string
          description: Problem name (must be unique)
          example: "Sort integer array"
        language:
          type: string
          description: Programming language
          example: "c"
        difficulty:
          type: string
          description: Problem difficulty level
          enum:
            - easy
            - medium
            - hard
          example: "easy"
        tags:
          type: array
          description: Problem tags
          items:
            type: string
          example: ["array", "int"]
        short-description:
          type: string
          description: Brief problem description
          example: "Lorem ipsum"
        long-description:
          type: string
          description: Detailed problem description in Markdown format
          example: "# Task\\nYou will be given an array of numbers."
        template-code:
          type: string
          description: Template code for the problem
          example: "int sort_odd(int n) {\\n    // Here comes your code.\\n}"

    AddProblemResponse:
      type: object
      required:
        - problem-id
      properties:
        problem-id:
          type: string
          description: Database ID of the created problem
          example: "5"

    # ───────────────────────── Problems list ─────────────────────────
    ProblemsFilterRequest:
      type: object
      properties:
        difficulty:
          type: array
          items:
            type: string
            enum: [easy, medium, hard]
        search:
          type: string
        offset:
          type: integer
          minimum: 0
        limit:
          type: integer
          minimum: 1
          maximum: 100

    ProblemMetadata:
      type: object
      required: [problem-id, name, difficulty, short-description, language]
      properties:
        problem-id: { type: integer }
        name:       { type: string }
        difficulty:
          type: string
          enum: [easy, medium, hard]
        short-description: { type: string }
        language:
          type: string
          description: Programming language for the problem
          example: "c"

    ProblemsListResponse:
      type: object
      required: [total, problems]
      properties:
        total:
          type: integer
          description: Total rows matching the query
        problems:
          type: array
          items: { $ref: "#/components/schemas/ProblemMetadata" }

    ProblemAllRequest:
      type: object
      properties:
        limit:
          type: integer
          description: Optional limit on number of problems returned
          default: 100
          example: 20

    # ───────────────────────── Discussion board ─────────────────────
    ThreadAuthor:
      type: object
      required: [name]
      properties:
        name:      { type: string }
        avatarUrl:
          type: string
          format: uri
          nullable: true

    ThreadSummary:
      type: object
      required:
        [id, title, snippet, problem-slug,
         votes, comments, views, createdAt, author]
      properties:
        id:           { type: string }
        title:        { type: string }
        snippet:      { type: string }
        problem-slug: { type: string }
        votes:        { type: integer }
        comments:     { type: integer }
        views:        { type: integer }
        createdAt:    { type: string, format: date-time }
        author:       { $ref: "#/components/schemas/ThreadAuthor" }

    ThreadsListResponse:
      type: object
      required: [total, threads]
      properties:
        total: { type: integer }
        threads:
          type: array
          items: { $ref: "#/components/schemas/ThreadSummary" }

    ThreadCreateRequest:
      type: object
      required: [title, content, problem-slug]
      properties:
        title:        { type: string }
        content:      { type: string }
        problem-slug: { type: string }

    ThreadCreateResponse:
      type: object
      required: [id]
      properties:
        id: { type: string }

    ThreadDetailResponse:
      allOf:
        - $ref: "#/components/schemas/ThreadSummary"
        - type: object
          required: [content]
          properties:
            content: { type: string }

    # ───────────────────────── Comments ─────────────────────────────
    Comment:
      type: object
      required: [id, body, createdAt, author]
      properties:
        id:        { type: string }
        body:      { type: string }
        createdAt: { type: string, format: date-time }
        author:    { $ref: "#/components/schemas/ThreadAuthor" }

    CommentsListResponse:
      type: object
      required: [total, comments]
      properties:
        total: { type: integer }
        comments:
          type: array
          items: { $ref: "#/components/schemas/Comment" }

    CommentCreateRequest:
      type: object
      required: [body]
      properties:
        body: { type: string }

    CommentCreateResponse:
      type: object
      required: [id]
      properties:
        id: { type: string }

    # ───────────────────────── Profile page ─────────────────────────
    ProfileSolvedStats:
      type: object
      required: [total, easy, medium, hard]
      properties:
        total:  { type: integer }
        easy:   { type: integer }
        medium: { type: integer }
        hard:   { type: integer }

    ProfileLanguageStat:
      type: object
      required: [language, solved]
      properties:
        language: { type: string }
        solved:   { type: integer }

    ProfileRecentItem:
      type: object
      required: [id, title, createdAt]
      properties:
        id:        { type: string }
        title:     { type: string }
        createdAt: { type: string, format: date-time }

    ProfileRecentSubmissionItem:
      type: object
      required: [submission_id, problem_id, title, createdAt]
      properties:
        submission_id: { type: string }
        problem_id: { type: integer }
        title: { type: string }
        createdAt: { type: string, format: date-time }

    ProfileResponse:
      type: object
      required:
        [username, avatarUrl, rank, solved, greenScore,
         languageStats, recentSubmissions, recentDiscussions]
      properties:
        username:  { type: string }
        avatarUrl:
          type: string
          format: uri
          nullable: true
        rank:       { type: integer }
        solved:     { $ref: "#/components/schemas/ProfileSolvedStats" }
        greenScore: { type: integer }
        languageStats:
          type: array
          items: { $ref: "#/components/schemas/ProfileLanguageStat" }
        recentSubmissions:
          type: array
          items: { $ref: "#/components/schemas/ProfileRecentSubmissionItem" }
        recentDiscussions:
          type: array
          items: { $ref: "#/components/schemas/ProfileRecentItem" }

    ProfileUpdateRequest:
      type: object
      properties:
        avatarUrl:
          type: string
          format: uri
        bio: { type: string }

    ProfileUpdateResponse:
      type: object
      required: [updated]
      properties:
        updated:
          type: boolean
          example: true

    remove_problem_request:
      type: object
      required: [problem_id]
      properties:
        problem_id:
          type: integer
          description: Database ID of the problem to delete
          example: 42

    remove_problem_response:
      type: object
      required: [problem_id, deleted]
      properties:
        problem_id:
          type: integer
          description: Database ID of the deleted problem
          example: 42
        deleted:
          type: boolean
          description: Indicates whether the deletion succeeded
          example: true



  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        JWT token obtained from login or register endpoints.

        **How to use**: Include the token in the Authorization header:
        ```
        Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
        ```

        The JWT payload contains:
        - uuid: User's unique identifier (hexadecimal string)
        - username: User's username
        - permission_level: Permission level ("user" or "admin")
        - exp: Token expiration time in seconds

        Example payload:
        {
          "uuid": "1F",
          "username": "bakbeest",
          "permission_level": "user",
          "exp": 49024
        }
